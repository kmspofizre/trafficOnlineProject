import logging
from constants import tg_token
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes
)
from refresh import refresh_tokens
from collections import deque
import functools
import inspect
import time
from TrafficBot import TrafficBot
from constants import API_key


class TGTraffic:
    def __init__(self, data_path, directions_path):
        self.traffic_bot = TrafficBot(API_key, data_path, directions_path)
        self.application = Application.builder().token(tg_token).build()
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("activate_script", self.activate_script))
        self.application.add_handler(CommandHandler("stop_script", self.stop_script))
        self.application.add_handler(CommandHandler("status", self.status))
        self.application.add_handler(CommandHandler("update_tokens", self.update_tokens))
        self.application.add_handler(CommandHandler("show_logs", self.show_logs))
        self.application.add_handler(CommandHandler("help", self.help))
        self.interval = 12 * 3600
        logging.basicConfig(
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            level=logging.INFO,
            filename='logs/tg.log',
            filemode='a'
        )
        self.logger = logging.getLogger(__name__)

    def run(self):
        self.application.job_queue.run_repeating(self.token_refresh, interval=self.interval, first=0)
        self.application.run_polling()

    @staticmethod
    def trusted_user(condition):
        def decorator(func):
            @functools.wraps(func)
            async def wrapper(*args, **kwargs):
                result = condition(*args, **kwargs)
                if inspect.isawaitable(result):
                    result = await result

                if result:
                    return await func(*args, **kwargs)
                else:
                    return None

            return wrapper

        return decorator

    async def check_user(self, update, context):
        if update.message.from_user.id in (988468804, 2017350326):
            return True
        else:
            return False

    @trusted_user(check_user)
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        self.logger.info(update.message.from_user)
        self.logger.info(update.message.from_user.id)
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏, —Ç–µ–ø–µ—Ä—å –º–Ω–µ –º–æ–≥—É—Ç –ø–∏—Å–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–≤–∞ —á–µ–ª–æ–≤–µ–∫–∞"
        )

    @trusted_user(check_user)
    async def activate_script(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        response_text = self.traffic_bot.start()
        await update.message.reply_text(response_text)

    @trusted_user(check_user)
    async def stop_script(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        response_text = self.traffic_bot.stop()
        await update.message.reply_text(response_text)

    @trusted_user(check_user)
    async def status(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        process_running = self.traffic_bot.is_running()
        if process_running:
            await update.message.reply_text("–ë–æ—Ç –Ω–∞ –æ—Ö–æ—Ç–µ –∑–∞ –≥—Ä—É–∑–∞–º–∏ üòà"
                                            f"\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞—Ç—É—Å—ã –æ—Ç–≤–µ—Ç–æ–≤: {self.traffic_bot.get_last_statuses()}"
                                            f"\n–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: "
                                            f"{self.traffic_bot.get_last_status_update().strftime('%d.%m.%Y %H:%M')}")
        else:
            await update.message.reply_text("–ë–æ—Ç –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç üò¥")

    @trusted_user(check_user)
    async def update_tokens(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        self.logger.info("–û–±–Ω–æ–≤–ª—è—é —Ç–æ–∫–µ–Ω—ã")
        refresh_status, data = refresh_tokens()
        time.sleep(2)
        if refresh_status == 200:
            getter_updated, booker_updated = self.traffic_bot.refresh_api_key(data.get("access_token"))
            await context.bot.send_message(chat_id=update.message.from_user.id,
                                           text=f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤, —Å—Ç–∞—Ç—É—Å: {getter_updated}, {booker_updated}")
        else:
            await context.bot.send_message(chat_id=update.message.from_user.id,
                                           text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤")

    async def token_refresh(self, context: ContextTypes.DEFAULT_TYPE) -> None:
        self.logger.info("–û–±–Ω–æ–≤–ª—è—é —Ç–æ–∫–µ–Ω—ã")
        refresh_status, data = refresh_tokens()
        time.sleep(2)
        if refresh_status == 200:
            getter_updated, booker_updated = self.traffic_bot.refresh_api_key(data.get("access_token"))
            await context.bot.send_message(chat_id=988468804,
                                           text=f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤, —Å—Ç–∞—Ç—É—Å: {getter_updated}, {booker_updated}")
        else:
            await context.bot.send_message(chat_id=988468804,
                                           text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤")

    @trusted_user(check_user)
    async def show_logs(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        with open("logs/bot_info.log", 'r', encoding='utf-8') as f:
            last_lines = deque(f, maxlen=10)
            await update.message.reply_text(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π –∏–∑ –ª–æ–≥–æ–≤:\n{''.join(last_lines)}")

    @trusted_user(check_user)
    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        text = """
        /activate_script - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≥—Ä—É–∑–æ–≤\n\n
    /stop_script - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≥—Ä—É–∑–æ–≤\n\n
    /status - —É–∑–Ω–∞—Ç—å, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –±–æ—Ç –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç\n\n
    /show_logs - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π –∏–∑ –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –∫–æ–¥—ã –æ—Ç–≤–µ—Ç–∞ —Ä–∞–≤–Ω—ã 200, –∑–Ω–∞—á–∏—Ç –≤—Å–µ —Ö–æ—Ä–æ—à–æ, –µ—Å–ª–∏ –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ 401 - –∏–º–µ–µ—Ç —Å–º—ã—Å–ª –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –∫–æ–º–∞–Ω–¥–æ–π /update_tokens. –ï—Å–ª–∏ –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ –¥—Ä—É–≥–æ–π, –∑–Ω–∞—á–∏—Ç –Ω—É–∂–Ω–æ —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è\n\n
    /update_tokens - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É, –µ—Å–ª–∏ –±–æ—Ç –±—ã–ª –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –±–æ–ª—å—à–µ 10 —á–∞—Å–æ–≤
        """
        await update.message.reply_text(text)








