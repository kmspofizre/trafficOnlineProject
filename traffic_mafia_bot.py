import logging
from constants import tg_token, main_menu_markup, directions_menu_markup
from telegram import Update, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters, CallbackQueryHandler
)
from collections import deque
import functools
import inspect
from TrafficBot import TrafficBot
from constants import API_key
from JsonManager import JsonManager
from telegram.error import BadRequest

#TODO: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ json
#TODO: refresh –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–æ—Ç–µ


MAIN_MENU, DIRECTIONS_MENU, CITY_MENU = range(3)

class TGTraffic:
    def __init__(self, data_path, directions_path):
        self.traffic_bot = TrafficBot(API_key, data_path, directions_path)
        self.jm = JsonManager(directions_path)
        self.application = Application.builder().token(tg_token).build()
        self.application.add_handler(CommandHandler("activate_script", self.activate_script))
        self.application.add_handler(CommandHandler("stop_script", self.stop_script))
        self.application.add_handler(CommandHandler("status", self.status))
        self.application.add_handler(CommandHandler("update_tokens", self.update_tokens))
        self.application.add_handler(CommandHandler("show_logs", self.show_logs))
        self.application.add_handler(CommandHandler("help", self.help))
        self.application.add_handler(CommandHandler("show_directions", self.show_directions))
        self.application.add_handler(CallbackQueryHandler(self.direction_callback))
        self.last_inline_message = None
        self.last_group_id = None
        self.application.add_handler(ConversationHandler(
        entry_points=[CommandHandler("start", self.start)],
        states={
            MAIN_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.main_menu_handler)],
            DIRECTIONS_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.directions_menu_handler)],
            CITY_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.city_menu_handler)],
        },
        fallbacks=[CommandHandler("cancel", self.cancel)],
    ))
        self.interval = 12 * 3600
        logging.basicConfig(
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            level=logging.INFO,
            #filename='logs/tg.log',
            #filemode='a'
        )
        self.logger = logging.getLogger(__name__)

    def run(self):
        self.application.job_queue.run_repeating(self.token_refresh, interval=self.interval, first=0)
        # self.application.job_queue.run_repeating(self.check_booked_shipping, interval=120, first=0)
        self.application.run_polling()

    @staticmethod
    def trusted_user(condition):
        def decorator(func):
            @functools.wraps(func)
            async def wrapper(*args, **kwargs):
                result = condition(*args, **kwargs)
                if inspect.isawaitable(result):
                    result = await result

                if result:
                    return await func(*args, **kwargs)
                else:
                    return None

            return wrapper

        return decorator

    async def check_user(self, update, context):
        if update.message.from_user.id in (988468804, 2017350326, 273012006):
            return True
        else:
            return False

    @trusted_user(check_user)
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        self.logger.info(update.message.from_user)
        self.logger.info(update.message.from_user.id)
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! Traffic Mafia –±–æ—Ç –Ω–∞ —Å–≤—è–∑–∏, –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π",
            reply_markup=main_menu_markup
        )
        return MAIN_MENU

    def get_help(self) -> str:
        return (
            "–°–ø—Ä–∞–≤–∫–∞:\n"
            "1. –°—Ç–∞—Ç—É—Å ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞.\n"
            "2. –°–ø—Ä–∞–≤–∫–∞ ‚Äî –≤—ã–≤–æ–¥–∏—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
            "3. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–æ–≥–∏.\n"
            "4. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç ‚Äî –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç.\n"
            "5. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∫—Ä–∏–ø—Ç ‚Äî –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç.\n"
            "6. –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è ‚Äî –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
        )

    @trusted_user(check_user)
    async def activate_script(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        response_text = self.traffic_bot.start()
        await update.message.reply_text(response_text)

    @trusted_user(check_user)
    async def stop_script(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        self.traffic_bot.set_exit_message(f"–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.message.from_user.username}")
        response_text = self.traffic_bot.stop()
        await update.message.reply_text(response_text)

    @trusted_user(check_user)
    async def status(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        await update.message.reply_text(self.traffic_bot.get_operating_status())

    @trusted_user(check_user)
    async def update_tokens(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        getter_updated, booker_updated = self.traffic_bot.refresh_and_restart()
        await context.bot.send_message(chat_id=update.message.from_user.id,
                                       text=f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤, —Å—Ç–∞—Ç—É—Å: {getter_updated}, {booker_updated}")

    async def token_refresh(self, context: ContextTypes.DEFAULT_TYPE) -> None:
        getter_updated, booker_updated = self.traffic_bot.refresh_and_restart()
        await context.bot.send_message(chat_id=988468804,
                                       text=f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤, —Å—Ç–∞—Ç—É—Å: {getter_updated}, {booker_updated}")

    async def check_booked_shipping(self, context: ContextTypes.DEFAULT_TYPE) -> None:
        shipping_string = self.traffic_bot.get_last_booked_string()
        self.traffic_bot.clear_last_booked()
        if shipping_string != "":
            for user in (988468804, 2017350326, 273012006):
                await context.bot.send_message(chat_id=user, text=shipping_string)

    @trusted_user(check_user)
    async def show_logs(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        with open("logs/bot_info.log", 'r', encoding='utf-8') as f:
            last_lines = deque(f, maxlen=10)
            await update.message.reply_text(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π –∏–∑ –ª–æ–≥–æ–≤:\n{''.join(last_lines)}")

    @trusted_user(check_user)
    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        text = """
        /activate_script - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≥—Ä—É–∑–æ–≤\n\n
    /stop_script - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≥—Ä—É–∑–æ–≤\n\n
    /status - —É–∑–Ω–∞—Ç—å, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –±–æ—Ç –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç\n\n
    /show_logs - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π –∏–∑ –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –∫–æ–¥—ã –æ—Ç–≤–µ—Ç–∞ —Ä–∞–≤–Ω—ã 200, –∑–Ω–∞—á–∏—Ç –≤—Å–µ —Ö–æ—Ä–æ—à–æ, –µ—Å–ª–∏ –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ 401 - –∏–º–µ–µ—Ç —Å–º—ã—Å–ª –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –∫–æ–º–∞–Ω–¥–æ–π /update_tokens. –ï—Å–ª–∏ –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ –¥—Ä—É–≥–æ–π, –∑–Ω–∞—á–∏—Ç –Ω—É–∂–Ω–æ —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è\n\n
    /update_tokens - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É, –µ—Å–ª–∏ –±–æ—Ç –±—ã–ª –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –±–æ–ª—å—à–µ 10 —á–∞—Å–æ–≤
        """
        await update.message.reply_text(text)

    @trusted_user(check_user)
    async def show_directions(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        directions = self.traffic_bot.get_current_directions_names()
        await update.message.reply_text(directions)

    @trusted_user(check_user)
    async def main_menu_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        text = update.message.text
        print("here")
        if text == "–°—Ç–∞—Ç—É—Å üìà":
            print("here2")
            await update.message.reply_text(self.traffic_bot.get_operating_status(), reply_markup=main_menu_markup)
            return MAIN_MENU

        elif text == "–°–ø—Ä–∞–≤–∫–∞ ‚ÑπÔ∏è":
            await update.message.reply_text(self.get_help(), reply_markup=main_menu_markup)
            return MAIN_MENU

        elif text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏ üîç":
            with open("logs/bot_info.log", 'r', encoding='utf-8') as f:
                last_lines = deque(f, maxlen=10)
                await update.message.reply_text(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π –∏–∑ –ª–æ–≥–æ–≤:\n{''.join(last_lines)}")
            return MAIN_MENU

        elif text == "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç ‚ñ∂":
            response_text = self.traffic_bot.start()
            await update.message.reply_text(response_text)
            return MAIN_MENU

        elif text == "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∫—Ä–∏–ø—Ç ‚õî":
            self.traffic_bot.set_exit_message(f"–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.message.from_user.username}")
            response_text = self.traffic_bot.stop()
            await update.message.reply_text(response_text)
            return MAIN_MENU

        elif text == "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è üöò":
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=directions_menu_markup)
            return DIRECTIONS_MENU

        else:
            await update.message.reply_text(
                "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.",
                reply_markup=main_menu_markup
            )
            return MAIN_MENU

    @trusted_user(check_user)
    async def directions_menu_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        text = update.message.text
        if text in ("–ò–∑ –ú–æ—Å–∫–≤—ã üèô", "–ò–∑ –ü–∏—Ç–µ—Ä–∞ üåâ", "–ò–∑ –ö–∞–∑–∞–Ω–∏ üïå", "–ò–∑ –†–æ—Å—Ç–æ–≤–∞-–Ω–∞-–î–æ–Ω—É üåä", "–ò–∑ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–∞ üå≥"):
            direction_group = self.jm.get_group_by_name(text)
            await self.delete_last_inline()
            if direction_group:
                keyboard = self.jm.make_directions_keyboard(direction_group)
                self.last_inline_message = await update.message.reply_text(f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è {text}", reply_markup=keyboard)
                return DIRECTIONS_MENU

        elif text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ üß≠":
            await self.delete_last_inline()
            active_keyboard = self.jm.make_active_directions_keyboard()
            self.last_inline_message = await update.message.reply_text("–ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
                                                                       reply_markup=active_keyboard)
            return DIRECTIONS_MENU
        elif text == "–ù–∞–∑–∞–¥":
            await self.delete_last_inline()
            await update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è:", reply_markup=main_menu_markup)
            return MAIN_MENU
        else:
            await self.delete_last_inline()
            await update.message.reply_text(
                "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.",
                reply_markup=main_menu_markup
            )
            return DIRECTIONS_MENU

    @trusted_user(check_user)
    async def city_menu_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        pass

    @trusted_user(check_user)
    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        await update.message.reply_text(
            "–ú–∞—Ñ–∏—è —É—Ö–æ–¥–∏—Ç –Ω–∞ –ø–æ–∫–æ–π...\n–ù–æ —Ç–æ–ª—å–∫–æ –Ω–∞ –≤—Ä–µ–º—è",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    async def direction_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        query = update.callback_query
        await query.answer()
        if query.data == 'back':
            await query.message.delete()
            return

        direction_info = query.data.split('_')
        if len(direction_info) == 3:
            if direction_info[0] == "sd":
                self.jm.invert_direction_active(direction_info[1], direction_info[2])
                self.jm.save()
                updated_keyboard = self.jm.make_directions_keyboard(direction_info[1])
                await query.edit_message_reply_markup(reply_markup=updated_keyboard)
            elif direction_info[0] == "ac":
                self.jm.invert_direction_active(direction_info[1], direction_info[2])
                self.jm.save()
                updated_keyboard = self.jm.make_active_directions_keyboard()
                await query.edit_message_reply_markup(reply_markup=updated_keyboard)

    async def delete_last_inline(self):
        if self.last_inline_message is not None:
            try:
                await self.last_inline_message.delete()
            except BadRequest:
                pass







